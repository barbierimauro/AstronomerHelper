#!/bin/bash
#(C) 2023 Mauro Barbieri
# maurobarbieri.science@gmail.com
#


# Initialize empty variables for input file, output file, output format, and overwrite flag
input_file=""
output_file=""
outfmt=""
overwrite="false"

# Initialize flags to check for mandatory command-line options
in_flag=0
out_flag=0
format_flag=0

# Parsing command-line options using getopts
while getopts ":i:o:f:w:h" opt; do
  case $opt in
    i)
      input_file="$OPTARG"
      in_flag=1
      ;;
    o)
      output_file="$OPTARG"
      out_flag=1
      ;;
    f)
      outfmt="$OPTARG"
      format_flag=1
      ;;
    w)
      overwrite="$OPTARG"
      ;;
    h) # Handle -h option for displaying help message
      echo
      echo "vospec2csv"
      echo
      echo "vospec2csv is a program to convert a VO (Virtual Observatory) spectra FITS file into"
      echo "a simplified 1D spectra file in either CSV or ascii."
      echo "The software use the program STILTS of M. Taylor for working with FITS files"
      echo "https://www.star.bristol.ac.uk/~mbt/stilts/"
      echo 
      echo "usage: vospec2csv -i spectra_fits -o spectra_csv -f format -w (write)"
      echo
      echo "format: accepted values are csv or ascii (both case-insensitive)"
      echo "write : accepted values are true (overwrite) or false (no overwrite, default value)"
      echo
      echo "AUTHOR"
      echo "Mauro Barbieri, maurobarbieri.science@gmail.com"
      echo
      exit 0
      ;;
    \?) # Handle invalid options
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :) # Handle missing argument for options
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done


# Check if mandatory flags are set; if not, display an error message and exit
if [ $in_flag -eq 0 ] || [ $out_flag -eq 0 ] || [ $format_flag -eq 0 ]; then
  echo
  echo "Missing mandatory options. -i, -o, and -f are required."
  echo "-i: require the name of the VO spectrum FITS file to convert to csv or ascii"
  echo "-o: require the output file name"
  echo "-f: require the format of the output file, accepted values are csv or ascii (case-insensitive)"
  echo
  echo "usage: vospec2csv -i spectra_fits -o spectra_csv -f format -w (write)"
  echo
  echo "format: accepted values are csv or ascii (both case-insensitive)"
  echo "write : accepted values are true (overwrite) or false (no overwrite, default value)"
  echo
  exit 1
fi

# Check if input file exists and is not zero size
if [ ! -s "$input_file" ]; then
  echo "Input file either doesn't exist or is empty. Exiting."
  exit 1
fi

# Check for output file and overwrite flag
if [ -e "$output_file" ] && [ "$overwrite" != "true" ]; then
  echo "Output file exists and overwrite is not allowed. Exiting."
  exit 1
fi

echo
echo "converting ${input_file} with STILTS"
echo

# Define a temporary file for intermediate data storage
tfile=__temp.csv
rm -rf $tfile

# Display the STILTS command being executed for debugging purposes
echo "stilts tcopy ifmt=fits ofmt=csv in=${input_file} out=${tfile} ..."
# Execute STILTS command to convert FITS file to CSV format, storing in a temporary file
stilts tcopy ifmt=fits ofmt=csv in=$input_file out=$tfile
echo

# Check if temporary file exists and is not zero size; if so, exit with an error message
if [ ! -s "$tfile" ]; then
  echo "Temporary file created by STILTS either doesn't exist or is empty. Exiting."
  exit 1
fi

# Convert output format specification to lowercase for case-insensitive comparison
outfmt=$(echo "$outfmt" | tr '[:upper:]' '[:lower:]')

# Based on the specified output format, write the header to the output file
if [ "$outfmt" == "csv" ]; then
    echo "$header" > "$output_file"
elif [ "$outfmt" == "ascii" ]; then
    echo "# $(echo "$header" | tr ',' ' ')" > "$output_file"
else
  # If output format is neither CSV nor ASCII, exit with an error message
    echo "Invalid output format specified. Exiting."
    exit 1
fi

# Read the first line of the temporary file to get the header (column labels)
header=$(head -n 1 "$tfile")
# Split the header into an array for further processing
IFS=',' read -ra header_array <<< "$header"


# Process input file to count elements in each cell and perform tests
awk -v header="$header" -F '","' 'BEGIN {
  # Initialize variables and split the header into an array
  split(header, header_array, ",");
  min_col1 = "unset";
  max_col1 = "unset";
  prev_val = "unset";
}
# Skip the first line of the file, assuming it is a header
NR==1 { next; }
{
  # Reset count array and sanitize column 1 values
  delete count;
  gsub(/[\(\)"]/, "", $1);
  
  # Split the first column and perform range and order checks
  n = split($1, arr1, ", ");
  # Update min and max values for column 1
  for (i = 1; i <= n; i++) {
    if (min_col1 == "unset" || arr1[i] < min_col1) {
      min_col1 = arr1[i];
    }
    if (max_col1 == "unset" || arr1[i] > max_col1) {
      max_col1 = arr1[i];
    }
    # Check if values in column 1 are in ascending order
    if (prev_val != "unset" && arr1[i] <= prev_val) {
      print "Test failed: diff("header_array[i]") is not always > 0";
      exit 1;
    }
    prev_val = arr1[i];
  }
  
  # Count the number of elements in each field
  for (i = 1; i <= NF; i++) {
    gsub(/[\(\)"]/, "", $i);
    n = split($i, arr, ", ");
    count[i] = n;
  }

  len_col1 = n;
}
END {
  # Print element counts for each column
  printf "Columns elements: \n";
  for (i = 1; i <= NF; i++) {
    printf "%s = %d \n", header_array[i], count[i];
  }
  printf "\n";

  # Verify if all columns have the same number of elements
  same_count = 1;
  for (i = 2; i <= NF; i++) {
    if (count[i] != count[1]) {
      same_count = 0;
      break;
    }
  }
  
  if (same_count == 0) {
    print "Error: Not all columns have the same number of elements.";
    exit 1;
  }

  # Print statistics for column 1 if min and max are set
  if (min_col1 != "unset" && max_col1 != "unset") {
    printf "Column %s\n", header_array[1];
    printf "min   = %s\n", min_col1;
    printf "max   = %s\n", max_col1;
    printf "range = %s\n", max_col1-min_col1;
    printf "step  = %s\n", (max_col1-min_col1)/len_col1;
  }
}' "$tfile"


echo

# Write the header to the output file
echo "$header" > "$output_file"

# Process the input file and write to the output file
awk -v outfmt="$outfmt" -F '","' 'NR > 1 {
  # Initialize the data associative array
  delete data;
  for (i = 1; i <= NF; i++) {
    # Remove unwanted characters from each field and split the elements
    gsub(/[\(\)"]/, "", $i);
    n = split($i, arr, ", ");
    for (j = 1; j <= n; j++) {
      data[i, j] = arr[j];  # Store elements in a 2D associative array
    }
  }

  len = n;
  # Print data to the output file, transposed
  for (i = 1; i <= len; i++) {
    for (j = 1; j <= NF; j++) {
      printf "%s", data[j, i];
      if (j < NF) {
        if (outfmt == "csv") {
          printf ",";  # Separate elements with a comma for CSV
        } else {
          printf " ";  # Separate elements with a space for ASCII
      }
     }
    }
    printf "\n";  # Newline after each row
  }
}' "$tfile" >> "$output_file" # Append the processed data to the output file

# Remove temporary file
rm -rf $tfile

# Display a completion message
echo
echo "conversion done to ${output_file}"
echo

